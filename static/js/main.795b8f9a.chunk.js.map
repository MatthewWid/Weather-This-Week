{"version":3,"sources":["config.js","helpers/getCurrentLocation.js","components/TodayInformation.js","components/ForecastDayCard.js","components/WeekForecast.js","components/WeatherInformation.js","components/LoadingIndicator.js","components/SearchForm.js","components/App.js","serviceWorker.js","index.js"],"names":["config","API_KEY","getLocation","navigator","Promise","resolve","reject","geolocation","getCurrentPosition","timeout","console","warn","TodayInformation","weather","this","props","current","react_default","a","createElement","className","title","concat","name","sys","country","main","temp_min","temp","temp_max","parseInt","rain","humidity","clouds","all","wind","speed","Component","ForecastDayCard","index","dayName","src","icon","description","alt","WeekInformation","days","forecast","list","forEach","day","dt_txt","split","push","dayNames","cards","map","i","Date","getDay","src_components_ForecastDayCard","key","WeatherInformation","src_components_TodayInformation","components_WeekForecast","LoadingIndicator","SearchForm","type","placeholder","onKeyDown","searchLocation","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","stage","currentWeather","weeklyForecast","bind","assertThisInitialized","_this2","window","myVar","then","location","setState","_location$coords","coords","latitude","longitude","fetch","stream","json","values","catch","err","error","res","evt","_this3","keyCode","target","value","length","preventDefault","query","encodeURIComponent","cod","info","components_WeatherInformation","src_components_LoadingIndicator","Fragment","src_components_SearchForm","Boolean","hostname","match","ReactDOM","render","src_components_App","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.795b8f9a.chunk.js","sourcesContent":["const config = {\r\n\tAPI_KEY: \"f777dcb03b2cca79453194e6f50610f5\"\r\n};\r\n\r\nexport default config;\r\n","// Ask for and get the current users' location\r\n\r\nfunction getLocation() {\r\n\tif (!(\"geolocation\" in navigator)) {\r\n\t\tconsole.warn(\"\\\"geolocation\\\" not available in user navigator.\");\r\n\t\treturn;\r\n\t}\r\n\r\n\t// https://stackoverflow.com/a/22519785/2954591\r\n\treturn new Promise((resolve, reject) => {\r\n\t\tnavigator.geolocation.getCurrentPosition(resolve, reject, {\r\n\t\t\ttimeout: 10000\r\n\t\t});\r\n\t});\r\n}\r\n\r\nexport default getLocation;\r\n","import React, {Component} from \"react\";\r\nimport \"./TodayInformation.css\";\r\n\r\nclass TodayInformation extends Component {\r\n\trender() {\r\n\t\tconst weather = this.props.current;\r\n\r\n\t\treturn (\r\n\t\t\t<section className=\"weather-today\">\r\n\t\t\t\t<h1 className=\"weather-today__section weather-today__title\" title={`${weather.name}, ${weather.sys.country}`}>\r\n\t\t\t\t\t{weather.name}\r\n\t\t\t\t</h1>\r\n\t\t\t\t<div className=\"weather-today__section weather-today__data\" title={`${weather.main.temp_min}° - ${weather.main.temp}° + ${weather.main.temp_max}°`}>\r\n\t\t\t\t\t<div className=\"weather-today__data-value\">{parseInt(weather.main.temp)}°C</div>\r\n\t\t\t\t\t<div className=\"weather-today__data-key\">Temperature</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"weather-today__section weather-today__data\" title=\"Average rainfall in the past three (3) hours (Millimeters).\">\r\n\t\t\t\t\t<div className=\"weather-today__data-value\">{parseInt((weather.rain || {})[\"3h\"] || 0)}mm</div>\r\n\t\t\t\t\t<div className=\"weather-today__data-key\">Rain</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"weather-today__section weather-today__data\">\r\n\t\t\t\t\t<div className=\"weather-today__data-value\">{weather.main.humidity}%</div>\r\n\t\t\t\t\t<div className=\"weather-today__data-key\">Humidity</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"weather-today__section weather-today__data\">\r\n\t\t\t\t\t<div className=\"weather-today__data-value\">{weather.clouds.all}%</div>\r\n\t\t\t\t\t<div className=\"weather-today__data-key\">Cloudiness</div>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className=\"weather-today__section weather-today__data\">\r\n\t\t\t\t\t<div className=\"weather-today__data-value\">{weather.wind.speed}m/s</div>\r\n\t\t\t\t\t<div className=\"weather-today__data-key\">Wind Speed</div>\r\n\t\t\t\t</div>\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default TodayInformation;\r\n","import React, {Component} from \"react\";\r\nimport \"./ForecastDayCard.css\";\r\n\r\nclass ForecastDayCard extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"weather-forecast-card\">\r\n\t\t\t\t<div className={`weather-forecast-card__day${this.props.index === 0 ? \" weather-forecast-card__day--underline\" : \"\"}`}>\r\n\t\t\t\t\t{this.props.dayName}\r\n\t\t\t\t</div>\r\n\t\t\t\t<img src={`http://openweathermap.org/img/w/${this.props.weather.weather[0].icon}.png`} className=\"weather-forecast-card__image\" title={this.props.weather.weather[0].description} alt={this.props.weather.weather[0].description} />\r\n\t\t\t\t<div className=\"weather-forecast-card__temp\">\r\n\t\t\t\t\t{parseInt(this.props.weather.main.temp)}°C\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ForecastDayCard;\r\n","import React, {Component} from \"react\";\r\nimport ForecastDayCard from \"./ForecastDayCard\";\r\nimport \"./WeekForecast.css\";\r\n\r\nclass WeekInformation extends Component {\r\n\trender() {\r\n\t\t// Get the forecast data from noon for today and the next four days\r\n\t\tlet days = [];\r\n\t\tthis.props.forecast.list.forEach((day) => {\r\n\t\t\tif (day.dt_txt.split(\" \")[1].split(\":\")[0] === \"12\") {\r\n\t\t\t\tdays.push(day);\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// const dayNames = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\r\n\t\tconst dayNames = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thurs\", \"Fri\", \"Sat\"];\r\n\t\tconst cards = days.map((day, i) => {\r\n\t\t\t// Get the name of the day by mapping the date text field number value to the dayNames array\r\n\t\t\tconst dayName = dayNames[(new Date(day.dt_txt)).getDay()];\r\n\r\n\t\t\treturn <ForecastDayCard dayName={dayName} weather={day} key={i} index={i} />;\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<section className=\"weather-forecast\">\r\n\t\t\t\t{cards}\r\n\t\t\t</section>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default WeekInformation;\r\n","import React, {Component} from \"react\";\r\nimport TodayInformation from \"./TodayInformation\";\r\nimport WeekInformation from \"./WeekForecast\";\r\n\r\nclass WeatherInformation extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"weather-info\">\r\n\t\t\t\t<TodayInformation current={this.props.current} />\r\n\t\t\t\t<WeekInformation forecast={this.props.forecast} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default WeatherInformation;\r\n","import React, {Component} from \"react\";\r\nimport \"./LoadingIndicator.css\";\r\n\r\nclass LoadingIndicator extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"loading-indicator\">\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t\t<div></div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default LoadingIndicator;\r\n","import React, {Component} from \"react\";\r\nimport \"./SearchForm.css\";\r\n\r\nclass SearchForm extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"search-form\">\r\n\t\t\t\t<input type=\"text\" className=\"search-form__input\" placeholder=\"Search for a city...\" onKeyDown={this.props.searchLocation} />\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default SearchForm;\r\n","import React, {Component} from \"react\";\nimport \"./App.css\";\nimport config from \"../config\";\nimport getLocation from \"../helpers/getCurrentLocation\";\nimport WeatherInformation from \"./WeatherInformation\";\nimport LoadingIndicator from \"./LoadingIndicator\";\nimport SearchForm from \"./SearchForm\";\n\n// TODO: API wrapper for making API calls with typing fetch(url)... every time\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tstage: \"initial\", // initial / loading / display / error\n\t\t\tcurrentWeather: null,\n\t\t\tweeklyForecast: null\n\t\t};\n\n\t\tthis.searchLocation = this.searchLocation.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\twindow.myVar = getLocation()\n\t\t\t.then((location) => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tstage: \"loading\"\n\t\t\t\t});\n\t\t\t\tconst {latitude, longitude} = location.coords;\n\n\t\t\t\tPromise.all([\n\t\t\t\t\tfetch(`https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&units=metric&appid=${config.API_KEY}`).then(stream => stream.json()),\n\t\t\t\t\tfetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${latitude}&lon=${longitude}&units=metric&appid=${config.API_KEY}`).then(stream => stream.json())\n\t\t\t\t]).then((values) => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tcurrentWeather: values[0], // weather at this very moment\n\t\t\t\t\t\tweeklyForecast: values[1], // weekly forecast\n\t\t\t\t\t\tstage: \"display\"\n\t\t\t\t\t});\n\t\t\t\t})\n\t\t\t\t.catch((err) => {\n\t\t\t\t\tconsole.error(\"Error querying API...\", err);\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((res) => {\n\t\t\t\tconsole.warn(\"Unable to obtain user's geographical location. Continuing without default state.\");\n\t\t\t});\n\t}\n\n\tsearchLocation(evt) {\n\t\tif (evt.keyCode === 13) {\n\t\t\tif (!evt.target.value || evt.target.value.length < 2) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tevt.preventDefault();\n\t\t\tthis.setState({\n\t\t\t\tstage: \"loading\"\n\t\t\t});\n\n\t\t\tconst query = encodeURIComponent(evt.target.value);\n\n\t\t\tPromise.all([\n\t\t\t\tfetch(`https://api.openweathermap.org/data/2.5/weather?q=${query}&units=metric&appid=${config.API_KEY}`).then(stream => stream.json()),\n\t\t\t\tfetch(`https://api.openweathermap.org/data/2.5/forecast?q=${query}&units=metric&appid=${config.API_KEY}`).then(stream => stream.json())\n\t\t\t]).then((values) => {\n\t\t\t\tif (values[0].cod === \"404\" || values[1].cod === \"404\") {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tstage: \"error\"\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentWeather: values[0],\n\t\t\t\t\tweeklyForecast: values[1],\n\t\t\t\t\tstage: \"display\"\n\t\t\t\t});\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.error(\"Error querying API...\", err);\n\t\t\t});\n\t\t}\n\t}\n\n\trender() {\n\t\tlet info;\n\t\tif (this.state.stage === \"display\") {\n\t\t\tinfo = <WeatherInformation current={this.state.currentWeather} forecast={this.state.weeklyForecast} />;\n\t\t} else if (this.state.stage === \"loading\") {\n\t\t\tinfo = <LoadingIndicator />;\n\t\t} else if (this.state.stage === \"error\") {\n\t\t\tinfo = <p>Cannot find that city or location.</p>;\n\t\t} else {\n\t\t\tinfo = <React.Fragment></React.Fragment>;\n\t\t}\n\n\t\treturn (\n\t\t\t<div className=\"weather-app\">\n\t\t\t\t<SearchForm searchLocation={this.searchLocation} />\n\t\t\t\t{info}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './components/App';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}